version: '3'

run: when_changed

vars:
  RELEASE_OPTIONS: "--ghc-options '-O2 -g0 -Werror'"
  PACKAGES: dev-gen
  FIND_FILES: $(fd -g '*.hs' $(fd -d 1 -g '{app,src,test}' {{.PACKAGES}}))

tasks:
  build:debug:
    aliases:
      - build
      - b
    cmd: stack build --test --no-run-tests --keep-going

  build:debug:watch:
    aliases:
      - build:watch
      - bw
    cmd:
      task: :watchman:client
      vars:
        WATCH: true
        RESTART: false
        MODE: haskell
        COMMAND: stack build --test --no-run-tests --keep-going

  build:release:
    aliases:
      - br
    cmd: stack build --work-dir build/stack-work-release --test --no-run-tests --keep-going {{.RELEASE_OPTIONS}}

  clean:
    deps:
      - task: clean:mode
        vars:
          MODE: debug
      - task: clean:mode
        vars:
          MODE: release

  clean:mode:
    internal: true
    requires:
      vars:
        - MODE
    cmd: stack clean --work-dir build/stack-work-{{.MODE}} --full

  execute-target:
    internal: true
    requires:
      vars:
        - WATCH
        - MODE
        - NAME
        - TARGET
        - ARGS
    vars:
      DIST_DIR:
        sh: realpath --relative-to . $(sh -c "$(cd {{.NAME}} && stack config env --work-dir build/stack-work-{{.MODE}}) echo \$HASKELL_DIST_DIR")
      FULL_TARGET: intertwine-{{.NAME}}-{{.TARGET}}
    cmd:
      task: :watchman:client
      vars:
        WATCH: '{{.WATCH}}'
        RESTART: false
        MODE: executable
        COMMAND: '{{.DIST_DIR}}/build/{{.FULL_TARGET}}/{{.FULL_TARGET}} {{.ARGS}} {{.CLI_ARGS}}'

  execute-target:run:debug:
    internal: true
    requires:
      vars:
        - NAME
    deps:
      - build:debug
    cmd:
      task: execute-target
      vars:
        WATCH: false
        MODE: debug
        NAME: '{{.NAME}}'
        TARGET: exe
        ARGS: '{{.ARGS}}'

  execute-target:run:release:
    internal: true
    requires:
      vars:
        - NAME
    deps:
      - build:release
    cmd:
      task: execute-target
      vars:
        WATCH: false
        MODE: release
        NAME: '{{.NAME}}'
        TARGET: exe
        ARGS: '{{.ARGS}}'

  execute-target:test:debug:
    internal: true
    requires:
      vars:
        - NAME
    deps:
      - build:debug
    cmd:
      task: execute-target
      vars:
        WATCH: false
        MODE: debug
        NAME: '{{.NAME}}'
        TARGET: test
        ARGS: '{{.ARGS}}'

  execute-target:test:debug:watch:
    internal: true
    requires:
      vars:
        - NAME
    deps:
      - build:debug
    cmd:
      task: execute-target
      vars:
        WATCH: true
        MODE: debug
        NAME: '{{.NAME}}'
        TARGET: test
        ARGS: '{{.ARGS}}'

  execute-target:test:release:
    internal: true
    requires:
      vars:
        - NAME
    deps:
      - build:release
    cmd:
      task: execute-target
      vars:
        WATCH: false
        MODE: release
        NAME: '{{.NAME}}'
        TARGET: test
        ARGS: '{{.ARGS}}'

  format:check:
    aliases:
      - fc
    cmd: ormolu --mode check {{.FIND_FILES}}

  format:fix:
    aliases:
      - format
      - f
    cmd: ormolu --mode inplace {{.FIND_FILES}}

  install:
    deps:
      - :dev-stack-bin:install

  link-build-dirs:
    deps:
      - :dev-gen:link-build-dir

  lint:
    aliases:
      - l
    cmd:
      task: lint:exec
      vars:
        WATCH: false

  lint:exec:
    internal: true
    requires:
      vars:
        - WATCH
    vars:
      STACK_LOCAL_BIN_PATH:
        sh: realpath --relative-to . {{.STACK_LOCAL_BIN_PATH}}
    cmd:
      task: :watchman:client
      vars:
        WATCH: '{{.WATCH}}'
        RESTART: false
        MODE: haskell
        COMMAND: hlint --hint {{.STACK_LOCAL_BIN_PATH}}/relude-hlint.yaml --hint dev-hlint/base.yaml --threads {{.FIND_FILES}}

  lint:watch:
    aliases:
      - lw
    cmd:
      task: lint:exec
      vars:
        WATCH: true

  repl-target:
    internal: true
    requires:
      vars:
        - MODE
        - NAME
    cmd: stack ghci --work-dir build/stack-work-{{.MODE}} intertwine-{{.NAME}}

  repl-target:debug:
    internal: true
    requires:
      vars:
        - NAME
    deps:
      - build:debug
    cmd:
      task: repl-target
      vars:
        MODE: debug
        NAME: '{{.NAME}}'

  repl-target:release:
    internal: true
    requires:
      vars:
        - NAME
    deps:
      - build:release
    cmd:
      task: repl-target
      vars:
        MODE: release
        NAME: '{{.NAME}}'

  test:debug:
    aliases:
      - test
      - t
    deps:
      - :dev-gen:test:debug

  test:release:
    aliases:
      - tr
    deps:
      - :dev-gen:test:release
